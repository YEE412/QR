// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CD
arma::vec CD(arma::mat x, arma::vec y, arma::vec beta, double toler, int maxit, double tau, double lambda);
RcppExport SEXP _QR_CD(SEXP xSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP tolerSEXP, SEXP maxitSEXP, SEXP tauSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(CD(x, y, beta, toler, maxit, tau, lambda));
    return rcpp_result_gen;
END_RCPP
}
// QRPMMCPP
arma::vec QRPMMCPP(arma::mat xr, arma::vec y, arma::vec beta, double toler, int maxit, double tau, double lamda);
RcppExport SEXP _QR_QRPMMCPP(SEXP xrSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP tolerSEXP, SEXP maxitSEXP, SEXP tauSEXP, SEXP lamdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lamda(lamdaSEXP);
    rcpp_result_gen = Rcpp::wrap(QRPMMCPP(xr, y, beta, toler, maxit, tau, lamda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_QR_CD", (DL_FUNC) &_QR_CD, 7},
    {"_QR_QRPMMCPP", (DL_FUNC) &_QR_QRPMMCPP, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_QR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
